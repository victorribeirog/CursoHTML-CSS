    Conceitos html

* Para criar o código base HTML, digite apenas "!".
* Alterar linha lang para "pt-br".
* Utilizar a tag h1 para criar um título.
* Para criar uma linha horizontal utilize a tag hr.
* Para criar um parágrafo utilize a tag p.
* Para quebrar uma linha utilize a tag br no local onde desejar quebrar a linha.
* Para fazer com que a tag apareça no texto utilize &lt;"tag"&gt;
* Para inserir um comentário no código utilize <!-->
* Alguns simbolos especiais:
    &reg - Marca registrada ®
    &copy - Copyright ©
    &trade - Trade Mark ™ 
    &Euro - Euro €
    &Delta - Delta  Δ 
    &uarr - Seta cima ↑
* Para inserir emojis utilizar o site emojipedia.org
* Sites para imagens com domínios públicos:
    UnSplash
    Pexels
    FreePik
    LibreShoy
* Tipos de Imagens:
    JPG: gerar aquivos muito pequenos e que ocupam pouco espaço em disco.
    PNG: capacidade de configurar a opacidade de cada pixel
* Adicionando Imagens:
    Utilizar a tag imagens.
    No campo src="" apertar Ctrl+Espaço entre as aspas para selecionar a imagem.
* Sites para favicon
    iconarchive
    favicon.cc
    favicon.io
* Adicionando um favicon:
    Na area <head> incluir a tag <link:favicon>
    Em seguida adicionar o favicon
* Os titulos em HTML possuem 6 níveis, <h1> - <h6>, onde um é sub-assunto do antecessor.
* Negrito e Itálico
    Para criar um texto em negrito podemos utilziar a tag <b>, mas ela não possui significado. Assim o mais correto é utilizar a tag <strong>, mostrando que o termo delimitado possui força dentro da frase.
    A mesma coisa acontece para palavras em itálico. Podemos utilizar a tag <i>, porém é mais recomendado utilizar a tag <em>, já que queremos dar ênfase ao termo.
* Texto Marcado
    Utilizando a tag <mark> podemos grifar o texto.
    Para trocar a cor do "grifado" é possível utilizar o parameto style = "background-color" dentro da tag.
    Para mudar a cor de tos os grifados devemos criar uma tag style dentro do cabeçalho, através de um seletor mark.
* Texto grande e pequeno
    Para criar textos grande podemos utilizar a tag <big>, no entanto não é mais utilizada pelo HTML5.
    Para textos pequenos basta utilizar a tag <small>.
* Texto deletado e inserido
    Para demonstrar que um texto deve ser lido, mas desconsiderado utilizados a tag <del>.
    Para demonstrar que um texto foi inserido depois utilizamos a tag <ins>.
* Texto sobrescrito e subescrito
    Para coisas do tipo x² utiliamos a tag <sup>.
    Para coisas do tipo H2O utiliamos a tag <sub>.
* Trechos de códigos e pré-formatação
    Podemos utilizar a tag <code> para delimitar o código escrito.
    Podemos também utilizar a tag <pre> para manter o texto pré-formatado, exatamente da forma como ele foi digitado.
* Citações
    Para criarmos uma citação simples utilizamos a tag <q> e automaticamento o texto aparecerá entre aspas.
    No caso de citações longas, utilizamos a tag <blockquote>. Assim o texto ganha um recuo automaticamente.Podemos também colocar o link para o texto original, usando o parâmetro cite dentro da tag.
* Abreviações
    Ao escrever uma sigla e desejar deixar claro ao usuário o significado dela, use a tag <abbr>.
* Listas
    Ordenadas: Para criar uma lista ordenada usamos a tag <ol> para delimitar a lista e <li> para identificar cada item da lista. A tag <ol> possui um parâmetro type, onde configuramos o tipo de marcador da lista atual.
    Não Ordenadas: Para criar uma lista não ordenada usamos a tag <ul> para delimitar a lista e <li> para criar um dos seus itens internos.
    É possível também misturar os tipos de listas.
    Lista de Definições: É como se fosse um dicionário, com termos e descrições. Toda lista de definição está dentro de uma tag <dl>. Cada termo é <dt> e cada descrição é um <dd>.
* Links
    Para criar um hyperlink, devemos criar âncoras através da tag <a>, adicionando o link em href.
    Para poder controlar onde o site destino vai abrir, podemos usar o atributo target, que suporta os seguintes valores:
        - _blank vai abrir o link em uma nova janela em branco
        - _self vai abrir o link na janela ou frame atual (padrão)
    Existe um recurso para links que é indicar qual é a natureza do destino usando o atributo rel. Esse stributo aceita vários valores:
        - next: indica que o link é para a próxima parte do documento atual.
        - pre: indica que o link é para a parte anterior do documento atual.
        - author: indica que é um link para o site do autor do artigo atual.
        - external: indica que é um link para outro site que não faz parte do site atual.
        - nofollow: indica que é um link para um site não endossado, como um link de patrocinio
    Para criar links para efetuar downloads, basta fazer o link diretamente para o arquivo que se deseja baixar e adicionar o atributo "download" com o valor configurado para o nome do arquivo a ser baixado e o atributo "type" para indicar ao navegador que tipo de arquivo está sendo baixado.
        - Alguns media types bem usados no nosso dia-a-dia:
            ‣ application/zip       ‣ text/html
            ‣ text/css              ‣ text/javascript
            ‣ video/mp4             ‣ video/H264
            ‣ video/JPEG            ‣ audio/aac
            ‣ audio/mpeg            ‣ font/ttf
            ‣ image/jpeg            ‣ image/png

* Imagens Dinâmicas
    Colocamos a tag <img>, porém a novidade aqui é que inserimos essa imagem dentro da tag <picture>, que vai concentrar as outras fontes de imagem. Para fazer com que a imagem se adapte ao tamanho da tela utlizamos a tag <source>, que possui três atributos: 
       ‣ type vai indicar o media type da imagem que usamos.
       ‣ srcset vai configurar o nome da imagem que será carregada quando o tamanho indicado for atingido.
       ‣ media indica o tamanho máximo a ser considerado para carregar a imagem indicada no atributo srcset.
    É importante que existe uma ordem entre os <source>

* Áudio
    A partir de agora, basta uma tag <audio> e alguns <source> para fazer seu site ser capaz de tocar qualquer áudio.
    Vamos analisar os principais atributos da tag <audio> antes de mais nada:
    ‣ O atributo preload indica se o áudio será pré-carregado ou não e aceita três valores:
        ๏ metadata vai carregar apenas as informações sobre o arquivo (tamanho,tempo, informações de direitos, etc). 
        ๏ none não vai carregar absolutamente nada até que o usuário clique no botão play ou um script inicie a reprodução.
        ๏ auto (padrão) vai carregar o arquivo de áudio inteiro assim que a página for carregada, mesmo que o usuário nunca aperte o play
    ‣ O atributo controls vai apresentar o player na tela. Caso não seja colocado na tag <audio>, o controle será transparente e o usuário não poderá interagir com ele.
    ‣ O atributo autoplay, quando inserido, vai iniciar a reprodução do áudio assim que a página for carregada.
    ‣ O atributo loop vai fazer com que o áudio seja repetido eternamente assim que terminar a sua reprodução.
    Dentro da tag <audio>, adicionamos vários <source> com formatos diferentes do mesmo áudio. Coloque na parte de cima o seu formato favorito Os demais só serão carregados caso o de cima falhe.

*Vídeos
    Para inserir um vídeo em nosso site, podemos utilizar a nova tag <video> da HTML5, caso o arquivo esteja hospedado no nosso próprio servidor.
    Alguns atributos importantes:
        ‣ width vai indicar a largura que o vídeo vai ter na tela. Nesse exemplo, 600px.
        ‣ poster configura uma imagem que vai aparecer como uma capa, enquanto o visitante não aperta o play para reproduzir o vídeo
        ‣ controls vai configurar se os controles do vídeo vão aparecer na parte inferior da mídia. Por padrão, os controles não aparecerão, mas basta colocar a palavra controls na tag <video>.
        ‣ autoplay diz para o navegador se o vídeo vai começar a tocar automaticamente, assim que a página for carregada.
    Para incorporar vídeos que você subiu no YouTube ou Vimeo, existem recursos que te dão o código pronto em HTML5. 
        No YouTube, abra o vídeo que você quer incorporar e clique no link COMPARTILHAR que fica abaixo do título. Ao clicar no link indicado anteriormente, uma janela vai aparecer, te dando as opções de compartilhamento. Escolha o item INCORPORAR.  

*CSS
    - CSS inline style: Técnica mais básica para aplicar estilos em áreas pontuais em nosso site, que é usando as CSS dentro de parâmetros de HTML5.
    - CSS internal style: Para aplicar estilos de forma mais dinâmica e prática, podemos adicionar uma tag <style> dentro da área <head> do nosso documento HTML local.
    - CSS external style: Manter as folhas de estilo fora do código HTML, além de uma maior organização faz com que tudo seja reaproveitado de maneira mais eficiente nas outras páginas do nosso site. Para isso, utilizamos a tag <link> especialmente configurada para trabalhar com arquivos externos de estilo. Essa tag deve ser colocada dentro da área <head> do seu documento HTML.

*Cores

Cor                Associada a                    Usar em                              Evitar
vermelho      amor, emoção, energia,    comida, moda, entretenimento,           luxo, natureza, serviços
              raiva,perigo              serviços de emergência e saúde          em geral

amarelo       felicidade, alegria,      dar luz, dar calma e felicidade,        pode indicar que algo é
              otimismo, covardia        chamar atenção                          barato ou spam

laranja       divertimento, ambição,    comércio eletrônico,entretenimento,     pode se tornar cansativo
              calor,cautela             call-to-action                          se muito explorado

verde         saúde, natureza,          relaxamento, turismo, financeiros,      luxo, tecnologia,
              dinheiro, sorte, inveja   meio ambiente                           meninas adolescentes

azul          competência, sabedoria,   tecnologia, medicina, ciências,         comida (reduz apetite)
              calma, frio               governo

roxo          criatividade, poder,      produtos de beleza, astrologia,         não prende muito a
              sabedoria, mistério       ioga, espiritualidade, adolescente      atenção, indiferente

marrom        terra, robustez,          alimentação, imobiliária, animais,      cor considerada
              estabilidade, amizade     finanças                                conservadora

preto         elegância, autoridade,    luxo, moda, marketing, cosméticos       desconforto e medo
              mistério, morte

branco        pureza, limpeza,          medicina, saúde, tecnologia, luxo       não chama atenção,
              felicidade, segurança     (com preto, ouro, cinza)                deve ser combinado

cinza         formalidade,sofisticação, bens de luxo, efeito calmante           dá a sensação de frieza
              frieza, indiferença
 
 rosa         amor, romance,            produtos femininos e cosméticos         pode tornar muito
              sinceridade, cuidados                                             sentimental e doce

- Círculo Cromático
    Analisando atentamente o círculo cromático, percebemos as três cores primárias, que estão destacadas com o texto mais escuro: amarelo, vermelho e azul.
    Da junção das cores primárias, temos as três cores secundárias, que são o laranja (amarelo+vermelho), o violeta/roxo (azul+vermelho) e o verde (azul+amarelo).
    Da junção de uma cor primária com uma secundária, temos as seis cores terciárias:
        ‣ Amarelo-esverdeado (amarelo+verde)
        ‣ Amarelo-alaranjado (amarelo+laranja)
        ‣ Vermelho-alaranjado (vermelho+laranja)
        ‣ Vermelho-arroxeado (vermelho+roxo)
        ‣ Azul-arroxeado (azul+roxo)
        ‣ Azul-esverdeado (azul+verde)
    Temperatura e Harmonia
        Olhando o círculo cromático, também conseguimos classificar as cores por sua temperatura. As cores quentes, criam uma sensação de calor e proximidade. Já as cores frias, estão associadas a sensações mais calmas, de frescor e tranquilidade. Além da classificação por temperatura, podemos classificar as cores por esquemas harmônicos.
    Cores complementares
        São aquelas que apresentam o maior contraste entre si. Elas estão localizadas do lado imediatamente oposto do círculo cromático. Se pegarmos qualquer cor primária, a sua cor complementar é sempre uma cor secundária. De forma similar, qualquer cor terciária tem uma outra cor terciária como complementar. Quando juntamos duas cores complementares, sempre obtemos o cinza.
    Cores análogas
        Diferente das cores complementares, que estão do lado extremo oposto no círculo cromático, as cores análogas são aquelas que são imediatamente vizinhas entre si. Por serem cores consecutivas, as cores análogas possuem um baixo contraste entre elas, mas criam uma bela harmonia quando combinadas em um mesmo design.
    Cores análogas mais uma complementar
        Essa técnica quebra um pouco o ritmo semelhante das cores análogas, adicionando uma cor que cria um grande contraste com as três análogas.
    Cores análogas relacionadas
        Nesse tipo de harmonia, escolhemos duas cores análogas (consecutivas) e depois pulamos uma terceira cor (em qualquer direção) e escolhemos a quarta. Com essa técnica, conseguimos um resultado parecido com o das cores análogas simples, mas com um pouco mais de contraste sem ter que escolher uma cor complementar.
    Cores intercaladas
        Um tipo menos usado de harmonia, já que às vezes não funciona tão bem assim. Vamos escolher a primeira cor e depois mais duas com intervalo constante entre elas.
    Cores triádicas
        Técnica bastante utilizada e que garante uma grande riqueza de cores, onde escolhemos três pontos equidistantes no círculo cromático. Esse esquema gera sempre um triângulo equilátero e cria uma opção que sempre possui um ótimo contraste entre as cores.
    Cores em quadrado
        Bastante semelhante ao esquema triádico, mas permite selecionar quatro cores com um contraste razoável entre as cores escolhidas. Esse esquema gera sempre um quadrado perfeito com os pontos selecionados.
    Cores tetrádicas
        Com essa técnica, vamos escolher dois pares de cores complementares, que não serão necessariamente análogas ou consecutivas. Isso vai nos garantir dois pares de cores, com bastante contraste entre si.
    Monocromia
        Uma harmonia bem diferente das anteriores, que usa apenas uma cor e varia apenas a sua saturação e o seu brilho. Essa combinação geralmente gera pouquíssimo contraste entre as cores escolhidas, mas acaba gerando um resultado visual bem agradável aos olhos, conhecido como “degradê”.

*Fontes

    As fontes são conjuntos de glifos que formam uma família tipográfica. O termo fonte também é aplicável ao arquivo digital que armazena todos os formatos de glifos que compõem uma determinada família tipográfica.
    Escolher um bom tipo é essencial para cada caso. Não povoar nosso site com tipos diferentes também é uma ótima ideia. No máximo dois ou três tipos já estaria ótimo.
    - Anatomia do Tipo
        A - Altura das maiúsculas: Altura que as letras maiúsculas vão ocupar. Geralmente um pouco menor que a soma da ascendente com a mediana (< B + D)
        B - Ascendente: Parte das letras maiúsculas que se ergue acima da linha mediana
        C - Descendente: Parte das letras minúsculas que passa por baixo da linha de base.
        D - Altura-X: Também chamada de mediana, define o tamanho das letras
        minúsculas. Tem esse nome, pois se baseia no tamanho da letra x minúscula.
        E - Corpo: É a soma de quatro medidas: ascendente + altura-x + descendente + espaço de reserva. É o tamanho total da letra. É o valor que escolhemos ao configurar o tamanho da fonte em um texto.
        1 - Arco: presente em letras minúsculas. Uma linha curva que nasce em na haste principal.
        2 - Barriga: curva em uma letra maiúscula ou minúscula, fechada, ligada à haste vertical em dois pontos.
        3 - Braço: traço horizontal ou inclinado, ligado à haste vertical principal de uma letra maiúscula ou minúscula.
        4 - Cauda: apêndice do corpo de algumas letras (g, j, J, K, Q, R), que fica abaixo da linha base.
        5 - Enlace: a forma como uma haste, linha ou filete se liga a um arremate, a uma serifa ou a um terminal. Pode ser angular ou curvilíneo.
        6 - Espinha: curva e contracurva estrutural da letra S.
        7 - Esporão: uma projeção que encontramos nas letras b e G.
        8 - Filete: haste horizontal ou inclinada, fechada nas duas extremidades, por duas hastes ou por uma curva.
        9 - Haste: traço principal de uma letra, geralmente vertical.
        10 - Olho: espaço em branco, fechado, dentro de uma letra.
        11 - Orelha: apêndice presente na letra g, que pode ser em gota, botão, bandeira ou gancho.
        12 - Pé: terminal ou serifa horizontal que arremata uma perna na parte de baixo.
        13 - Perna: haste vertical ou inclinada com um extremidade livre (ou com um pé) e outra extremidade ligada ao corpo da letra.
        14 - Serifa: também chamada de apoio ou patilha. Pequenas retas que ornamentam as hastes de alguns tipos.
        15 - Terminal: forma que arremata a extremidade de uma linha curva de uma letra.
        16 - Vértice: também chamada de ápice. Formada pela convergência de duas hastes que se encontram. Pode ser pontiagudo, oblíquo, plano ou redondo.
    - Categoria das Fontes
        Os tipos ou fontes tipográficas também são classificados por suas categorias. Elas são baseadas principalmente na presença ou ausência da serifa
        Fontes Serifadas: Esta é a categoria mais clássica de fontes. Tipicamente, os caracteres serifados sempre foram aplicados em grandes blocos de textos impressos em papel e se aproveitam de uma característica da nossa percepção: nós nunca lemos as palavras letra por letra, e sim por um conjunto. As serifas têm a capacidade de guiar nossos olhos graças aos pequenos prolongamentos que elas criam e fazem as letras “se juntarem” em palavras.
        Fontes não Serifadas: são fontes quennão apresentam serifas. Elas são ótimas para a exibição em telas/monitores pois transmitem a sensação de limpeza, clareza e organização.
        Fontes Monoespaçadas: Essa é uma das categorias de fontes que vieram derivadas das duas categorias que vimos anteriormente, por isso existem fontes monoespaçadas com e sem serifas. A principal diferença desse tipo de fonte é o espaço horizontal (largura) ocupado por cada letra. Elas possuem a mesma largura para todas as letras. A principal vantagem no uso desse tipo de fonte é facilitar ao máximo a leitura das palavras, principalmente aquelas que requerem que você as reproduza. Usamos muito esse tipo de fonte para representar comandos de linguagens de programação de computadores.
        Fontes Script: Também chamadas de fontes handwriting, são aquelas que tentam imitar a escrita humana. Seu uso deve ser bem controlado e jamais será aplicado a textos muito longos, pois causam cansaço visual e tornam-se difíceis de ler.
        Fontes Display: Toda fonte que foge completamente das definições feitas pelas classificações acima são consideradas fontes display. São fontes com bastante efeitos visuais, enfeitadas e até mesmo curiosas. Também são chamadas de fontes comemorativas e algumas delas sequer representam letras, podendo ser desenhos de animais, objetos, pessoas, personagens de quadrinhos, etc. Essas fontes também são recomendadas para criar títulos em destaque e devem ser evitadas para textos médios ou longos.
    - Tamanho de Fontes: Para especificar tamanho de fontes, existem várias medidas como cm (centímetros), in (polegadas), pt (pontos), pc (paicas), px (pixels), etc. Para tamanhos de fonte a serem exibidos na tela, o W3C recomenda o uso do px ou do em. A medida em é uma das que gera mais dúvida nos alunos. Ela é uma medida referencial em relação ao tamanho original da fonte. O tamanho padrão de uma fonte é geralmente 16px, isso equivale a 1em. A partir daí, podemos configurar o tamanho de um título, por exemplo, como sendo 2 vezes maior que a fonte padrão usando o valor 2em para a propriedade.
    - Outros Estilos: Existem outras formatações muito usadas em CSS, que são as propriedades font-style para aplicar o itálico e font-weight para aplicar o negrito. O padrão para essas duas propriedades é o valor normal, mas podemos aplicar o valor itálico ao font-style usando italic (mais compatível) ou oblique (menos compatível). Já o negrito, pode ser aplicado por nomes como lighter, bold e bolder ou pelo peso numérico.
    - Shorthands
        Existe uma shorthand para fontes que é a propriedade font. No lugar de fazer várias configurações em múltiplas linhas, podemos simplificar tudo de maneira muito simples.
        A ordem dos atributos de uma shorthand em CSS é importante. No caso da propriedade font, devemos informar, na ordem:
            • font-style
            • font-variant
            • font-weight
            • font-size/line-height
            • font-family
    - Tipos de format()
        * opentype (otf)
        * truetype (ttf)
        * embedded-opentype
        * truetype-aat (Apple Advanced Typography)
        * svg
    - Indentar parágrafo
        text-indent: 30px;

* Seletores Personalizados
    Para começar a dar mais poder às CSS, criando estilos personalizados, precisamos aprender a utilizar os seletores de id (#) e de class (.) de maneira eficiente.
    Um id vai identificar um elemento único dentro da página atual. Essa identificação vai nos permitir criar um estilo especial para um elemento isolado. Já um class vai identificar uma classe à qual um ou mais elementos pertençam, compartilhando características em comum a todos os que façam parte desse grupo.
    - Pseudo-classes e pseudo-elementos
        Uma pseudo-classe CSS é uma palavra-chave adicionada às declarações de um seletor após um sinal de dois pontos e especificam um estado especial de um elemento.
        Já um pseudo-elemento CSS é uma palavra-chave adicionada às declarações de um seletor após dois sinais de dois pontos e permitem que você formate um pedaço específico do elemento referenciado
    - Resumindo:
        #  = id
        .  = class
        :  = pseudo-class
        :: = pseudo-element
        >  = children

* Modelo de Caixas
    De forma simples e objetiva, baseado em um conceito chamado “box model”, a grande maioria dos elementos HTML que temos no nosso site são como caixas. Elas são containers que armazenam conteúdos ou até mesmo outras caixas.
    Por padrão, toda caixa é composta apenas pelo conteúdo e não possui padding, nem border, nem outline e nem margin. Uma exceção curiosa é o elemento <body> que já vem com uma margin de 8px.
    Todo conteúdo possui uma largura (width) e uma altura (height) e a esse conjunto de propriedades, damos o nome de box-size (tamanho da caixa). O tamanho da caixa não inclui as medidas de padding, border, outline e margin.
    Depois do conteúdo e de seu tamanho, vamos nos focar na borda que fica em volta dele. Ela pode ter uma espessura, uma cor e um formato.
    Entre a borda e o conteúdo - da borda para dentro - temos o preenchimento (padding) e da borda para fora, temos a margem (margin).
    Entre a margem e a borda, podemos determinar o contorno (outline) que é muito pouco utilizado, mas existe. Ele é um traçado visual que podemos criar fora da borda e o cálculo da sua espessura faz parte da margem estabelecida.
    Tipos de Caixa: Dependendo do comportamento da caixa, podemos classificar um elemento em uma de duas categorias:
        - Caixa do tipo block-level
            Um elemento dito block-level sempre vai se iniciar em uma nova linha e vai ocupar a largura total do elemento onde ele está contido. Se não estiver contido em nenhuma outra caixa, ele vai ocupar 100% da largura do <body>.
            O elemento block-level mais conhecido é o <div> e suas variações semânticas modernas da HTML5, como <main>, <section>, <aside>, etc.
        - Caixa do tipo inline-level
            Um elemento do tipo inline-level não vai começar em uma nova linha, e sim no ponto exato onde foram definidos. E a largura dele vai ocupar apenas o tamanho relativo ao seu conteúdo.
    Grouping Tags e Semantic Tags
        Com o surgimento da HTML5, surgiram as tags semânticas de agrupamento. Isso não significa que as <div> e <span> (agora chamadas de não-semânticas) deixaram de existir ou ficaram obsoletas, mas seu uso agora faz menos sentido, pois temos tagspara dividir as partes do nosso documento HTML.
        - Header: Cria áreas relativas a cabeçalhos. Pode ser o cabeçalho principal de um site ou até mesmo o cabeçalho de uma seção ou artigo. Normalmente inclui títulos <h1> - <h6> e subtítulos. Podem também conter menus de navegação.
        - Nav: Define uma área que possui os links de navegação pela estrutura de páginas que vão compor o website. Um <nav> pode estar dentro de um <header>.
        - Main: É um agrupador usado para delimitar o conteúdo principal do nosso site. Normalmente concentra as seções, artigos e conteúdos periféricos.
        - Section: Cria seções para sua página. Ela pode conter o conteúdo diretamente no seu corpo ou dividir os conteúdos em artigos com conteúdos específicos. Segundo a documentação oficial da W3C, “uma seção é um agrupamento temático de conteúdos, tipicamente com um cabeçalho”.
        - Article: Um artigo é um elemento que vai conter um conteúdo que pode ser lido de forma independente e dizem respeito a um mesmo assunto. Podemos usar um <article> para delimitar um post de blog ou fórum, uma notícia, etc.
        - Aside: Delimita um conteúdo periférico e complementar ao conteúdo principal de um artigo ou seção. Normalmente um conteúdo <aside> está posicionado ao lado de um determinado texto ou até mesmo no meio dele, exatamente como fizemos no bloco de texto apresentado anteriormente, falando sobre “MÚLTIPLOS NÍVEIS”.
        Footer: Cria um rodapé para o site inteiro, seção ou artigo. É um conteúdo que não faz parte diretamente do conteúdo nem é um conteúdo periférico (o que caracterizaria um <aside>), mas possui informações sobre autoria do conteúdo, links adicionais, mapa do site, documentos relacionados.
    Sombras nas caixas
        As sombras são muito úteis para dar volume, para dar a sensação de que as caixas estão ali realmente.
        Assim que adicionamos a propriedade box-shadow e seus quatro valores. A ordem é sempre essa:
            1. Deslocamento horizontal (h-offset): quanto a sombra vai andar para o lado direito (valores negativos causam deslocamento para a esquerda)
            2. Deslocamento vertical (v-offset): quanto a sombra vai andar para baixo (valores negativos causam deslocamento para cima)
            3. Embaçamento (blur): quanto a sombra vai se espalhar pelo fundo
            4. Cor (color): cor da sombra. É possível usar transparência.
    Bordas decoradas
        As bordas das caixas não precisam ser sempre retangulares e podem ter alguns detalhes especiais.
        - Vértices arredondados: Podemos arredondar os vértices usando uma declaração simples usando a propriedade border-radius. Se for necessário, podemos indicar quatro medidas diferentes, uma para cada vértice.

* Variáveis em CSS
    Para criarmos variáveis para nossas configurações, devemos definir uma área de definições dentro do seu estilo para uma pseudo-classe chamada :root, que definem as configurações para a raiz de uma árvore, que vai servir para o documento inteiro.
    As variáveis personalizadas em CSS devem ter seus nomes iniciando com dois traços obrigatoriamente.

* Seletor em CSS
    Existe também um seletor especial das CSS que é o asterisco (*), ele tem uma função muito especial, pois basicamente ele aplica uma configuração padrão para TODOS os elementos do código HTML ao qual o estilo está sendo aplicado.

* Espaçamento entre linhas
    Outra configuração muito importante que podemos fazer para textos muito longos é o de espaçamento entre as linhas do nosso texto. Usando a propriedade line-height, podemos dizer qual é o tamanho do espaço entre uma linha e a outra do texto.O valor padrão na maioria dos navegadores é algo próximo ao 1.2em.

* Sombras em textos
    A propriedade text-shadow também pode ter quatro parâmetros principais:
        1. Deslocamento horizontal (h-offset): quanto a sombra vai andar para o lado direito (valores negativos causam deslocamento para a esquerda).
        2. Deslocamento vertical (v-offset): quanto a sombra vai andar para baixo (valores negativos causam deslocamento para cima).
        3. Embaçamento (blur): quanto a sombra vai se espalhar pelo fundo.
        4. Cor (color): cor da sombra. É possível usar transparência.

* Imagens de fundo
    É possível aplicar imagens ao fundo de qualquer elemento exibido visualmente em HTML utilizando div.
    Quando o tamanho da caixa é maior que o tamanho da imagem, por padrão, a imagem será repetida nos dois eixos (eixo x e eixo y) quantas vezes for necessário para cobrir a extensão da caixa contêiner.É possível alterar esse comportamento usando a propriedade background-repeat.
    Além de escolher o nível de repetição do background, também podemos mudar a posição de referência de início das repetições. Por padrão, é considerado o canto esquerdo superior (left top), mas podemos ter várias opções.
    Outra coisa que podemos fazer é redimensionar a imagem para forçá-la a caber na caixa. Por padrão, nenhum redimensionamento será aplicado, e a imagem será exibida do seu tamanho natural. Porém, podemos usar a propriedade background-size para alterar esse comportamento.
    Os valores aceitos por essa propriedade são:
        - auto (padrão): a imagem de fundo será aplicada em seu tamanho original.
        - [length]px [length]%: Redimensiona a largura da imagem e faz a altura se adaptar automaticamente. Podemos também informar as duas dimensões na sequência ou também usar valores percentuais.
        -cover: Muda o tamanho da imagem para que ela seja sempre totalmente exibida na tela, sem nenhum corte. 
        contain: Redimensiona a imagem para que ela cubra o contêiner, mesmo que para isso ocorram alguns eventuais cortes.
    A última propriedade que podemos configurar é o vínculo (attachment) da imagem de fundo com o resto do documento, principalmente se o conteúdo for maior do que a altura da página e seja necessário vazar uma rolagem vertical. A propriedade background-attachment aceita os valores:
        scroll (padrão): A imagem de fundo vai rolar junto com o conteúdo.
        fixed: A imagem de fundo vai ficar fixada enquanto o conteúdo vai sendo rolado.
    Existe também a possibilidade de usar uma shorthand para simplificar o uso de propriedades que se apliquem ao
fundo de uma caixa. A propriedade abreviada background pode ser declarada agrupando as seguintes configurações:
            color > image > repeat > attachment > position / size

* Tabelas
    Hierarquia de Tabelas (simples)
        TABLE = tabela
            TABLE ROW = linha da tabela
                TABLE HEADER = cabeçalho da tabela
                TABLE DATA = dado da tabela
    Em CSS aplicar table {border-collapse : collapse} e td{border e padding}
    Alinhamento
        É possível alinhar horizontalmente através do text-align, mas também verticalmente com o vertical-align (top,bottom e middle).
    Anatomia para tabelas grandes
        TABLE
            CAPTION
            THEAD
                TR,TD,TH 
            TBODY
                TR,TD,TH
            TFOOT
            TR,TD,TH
    Escopo
        Utilizado para delimitar o titulo de determinada coluna ou linha. scope(col, row).
    Efeito Zebrado
        Para criar efeito zebrado na tabela criar um tbody > tr:nth-child(2n) {background-color}, onde é o numero de intercalações.
        É possivel também dividir em pares (even) e impares (odd) e assim, manipular separadamente.
    Cabeçalho fixo em tabelas grandes
        1º: adicionar position (relative) em table;
        2º: criar thead > tr > th {position(sticky); top: -1px; background-color(igual do thead)};
    Mesclagem de Células
        Expandir em colular <td colspan = "x"><td>, onde x é o número de colunas a expandir.
        O mesmo serve para expandir colunas, utilizando rowspan.
    Tabela responsiva
        Para fazer com que apenas a tabela fique responsiva coloque todo o conteudo de <table> dentro de uma <div> e configure o estilo da div com "overflow-x:auto"

* Inline Frames
    Um iframe é basicamente uma “janela aberta” dentro da nossa página para apresentar o conteúdo de outras páginas.
    Para criar um iframe utilize a tag <iframe>
    Por padrão o tamanho é 300x150px.
    Podemos ainda configurar detalhes visuais e comportamentais como o tamanho do frame, sua borda, a forma de rolagem e até mesmo tratar eventuais incompatibilidades com alguns navegadores
    A propriedade scrolling aceita três valores:
        • no - não permite a rolagem da página, mesmo que ela seja maior que o tamanho estabelecido para o frame.
        • yes - habilita a rolagem do conteúdo, mesmo que seu conteúdo não seja grande o suficiente para preencher o frame.
        • auto - (padrão) a rolagem é habilitada apenas se o conteúdo for maior que o tamanho do quadro estabelecido. 
    Acrescentamos uma frase entre <iframe> e </iframe> para que seja exibida caso o navegador do usuário não suporte o uso desse tipo de recurso. É interessante adicionar um link <a> a essa mensagem de erro para que o usuário possa visitar a página caso seu navegador não seja compatível com iframe.
    Cientes dos problemas que um iframe mal configurado pode trazer, a HTML5 implementou o novo recurso de sandbox. Uma caixa de areia (sandbox) é um ambiente controlado que permite exibir outros sites para seu visitante sem que ele possa “tomar controle” do site principal e aos dados do visitante. Quando habilitamos a sandbox em nosso iframe, automaticamente o site que está dentro do quadro perde algumas funcionalidades, dentre elas:
        • Não pode mais enviar dados de formulários
        • Não pode mais executar scripts
        • Desabilita todo tipo de API, janelas modais e popups
        • Desabilita todo tipo de plugin com <embed>, <object>,<applet>
        • Evita que o site dentro do iframe assuma a navegação top level do navegador
        • Bloqueia recursos como autoplay e foco automático em elementos de formulário

*Formulários
    A estrutura básica de um formulário é a seguinte:
    <form action="cadastro.php" method="get" autocomplete="off">
        <p><label for="inome">Nome: </label>
            <input type="text" name="nome" id="inome"></p>
        <p><label for="isobrenome">Sobreneom: </label>
            <input type="text" name="sobrenome" id="isobrenome"></p>
        <p><input type="submit" value="Enviar"></p>
    </form>
    A primeira e a última linhas vão delimitar o formulário. Tudo aquilo que estiver dentro desse par de tags será considerado como conteúdo dos campos. No exemplo acima, temos apenas um campo que vai aceitar um texto relativo ao nome da pessoa e um botão de submissão, que vai permitir enviar o formulário.
    Adiciona-se o method e o action. O primeiro vai indicar o método de envio dos dados e o segundo vai dizer para onde os dados serão enviados.
    Não existe nenhuma ligação semântica entre a caixa de texto e seu identificador. Para isso, vamos adicionar um <label> para que possa ser feito o relacionamento entre o campo e seu identificador Para que o <label> possa funcionar corretamente, a caixa de texto deverá ter um id.
    Existem dois métodos para enviar os dados de um formulário: GET e POST.
        Note que aquilo que você digitou no formulário apareceu na URL que está sendo apresentada no seu navegador. Isso é uma característica presente nos formulários com método GET, pois ele condensa todos os dados digitados pelo visitante e envia como parte do endereço acessado.
        Já o método POST vai pegar os dados digitados e enviar diretamente no corpo da requisição HTTP que será feita quando seu visitante clicar para enviar o formulário. Sendo assim, os dados não vão aparecer na URL.
        Podemos usar GET em um formulário contanto que:
            • Os dados a serem enviados não sejam sensíveis, como endereços, números de documentos, senhas, etc.
            • Tivermos formulários simples e que possam ser compartilhados facilmente através de uma URL. Por exemplo, o Google usa GET no seu formulário, pois você pode enviar um link para qualquer pessoa, já com a ação da busca embutida, como em http://google.com.br/search?q=Gustavo+Guanabara
            • Os dados a serem enviados nunca ultrapassem 3000 bytes.
            • Não contenha envio de arquivos como imagens (i.e. fotos de perfil), arquivos PDF, etc.
        Já o método POST é mais recomendado para casos em que:
            • Não queremos que os dados apareçam explicitamente na URL do navegador.
            • Capturamos dados como senhas, documentos e outro tipo de dado sensível.
            • Precisamos enviar muitos dados (acima de 3000 bytes ~ sem limites).
            • Precisamos enviar imagens ou outros tipos de arquivos.
        O name será bem útil durante o envio dos dados do formulário, independente do método escolhido para enviá-los. É ele que aparece na URL (ao usar GET) e no corpo do HTTP request (ao usar POST). É também através do name escolhido que vamos nos referenciar quando for a hora de programar o arquivo em PHP que vai receber esses dados.
        Já o id será muito útil para fazer a ligação com o <label> (sempre use labels, por favor) e também será referenciado nos casos em que quisermos tratar esses dados usando JavaScript para realizar qualquer ação, como por exemplo, fazer validação local dos campos antes de enviá-los.
        Utilize "required" na tag input para tornar o campo obrigatório e min/max lenght para estabelecer a quantidade de digitos.
        Utilize o autocomplete tanto na tag form (on) quanto na input para facilitar o cadastro do usuário
        É possivel agrupar formulários utilizando a tag "fieldset" e adicionar um título a ele com "legend".
        É possivel utilizar o "input" do tipo "file" para enviar arquivos, mas para isso é necessário utilizar o metodo "post"
        **Todo formulário que utiliza o metodo get tem um limete de 3 mil bytes para ser enviado
        É possivel criar uma lista de seleção utilizando "select", "option" e "optgroup"
        a tag "datalist" tem a mesma função de select, porem e possivel digitar a opção, além das já sugeridas.
        Utilize "textarea" para criar um campo de mensagem para o usuario. Nesse caso é necessário utilizar o metodo post
        A tag "output" é utilzada para calcular e mostrar coisas na tela

*Media Query
    Elas são basicamente as media types somadas às media features, que são características extras que foram criadas para que possamos personalizar ainda mais nossas folhas de estilo. A seguir, enumero algumas dessas características que podem ser testadas:
        • width e height
        • device-height e device-width
        • aspect-ratio e device-aspect-ratio
        • orientation
        • resolution
        • color e color-index
        • scan 
        • grid
    Media Queries nada mais são do que documentos de estilos criados para os diferentes tipos de midia. Ao utilizalos é possivel informar media types e (media features). Como por exemplo: 
        <link rel="stylesheet" href="estilos/paisagem.css" media="screen and (orientation: landscape)">

        


     




        



